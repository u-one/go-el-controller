// Code generated by MockGen. DO NOT EDIT.
// Source: transport.go

// Package transport is a generated GoMock package.
package transport

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMulticastReceiver is a mock of MulticastReceiver interface
type MockMulticastReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockMulticastReceiverMockRecorder
}

// MockMulticastReceiverMockRecorder is the mock recorder for MockMulticastReceiver
type MockMulticastReceiverMockRecorder struct {
	mock *MockMulticastReceiver
}

// NewMockMulticastReceiver creates a new mock instance
func NewMockMulticastReceiver(ctrl *gomock.Controller) *MockMulticastReceiver {
	mock := &MockMulticastReceiver{ctrl: ctrl}
	mock.recorder = &MockMulticastReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticastReceiver) EXPECT() *MockMulticastReceiverMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockMulticastReceiver) Start(ctx context.Context, ip, port string) <-chan ReceiveResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, ip, port)
	ret0, _ := ret[0].(<-chan ReceiveResult)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockMulticastReceiverMockRecorder) Start(ctx, ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMulticastReceiver)(nil).Start), ctx, ip, port)
}

// MockMulticastSender is a mock of MulticastSender interface
type MockMulticastSender struct {
	ctrl     *gomock.Controller
	recorder *MockMulticastSenderMockRecorder
}

// MockMulticastSenderMockRecorder is the mock recorder for MockMulticastSender
type MockMulticastSenderMockRecorder struct {
	mock *MockMulticastSender
}

// NewMockMulticastSender creates a new mock instance
func NewMockMulticastSender(ctrl *gomock.Controller) *MockMulticastSender {
	mock := &MockMulticastSender{ctrl: ctrl}
	mock.recorder = &MockMulticastSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMulticastSender) EXPECT() *MockMulticastSenderMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockMulticastSender) Send(data []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", data)
}

// Send indicates an expected call of Send
func (mr *MockMulticastSenderMockRecorder) Send(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMulticastSender)(nil).Send), data)
}

// MockUnicastReceiver is a mock of UnicastReceiver interface
type MockUnicastReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockUnicastReceiverMockRecorder
}

// MockUnicastReceiverMockRecorder is the mock recorder for MockUnicastReceiver
type MockUnicastReceiverMockRecorder struct {
	mock *MockUnicastReceiver
}

// NewMockUnicastReceiver creates a new mock instance
func NewMockUnicastReceiver(ctrl *gomock.Controller) *MockUnicastReceiver {
	mock := &MockUnicastReceiver{ctrl: ctrl}
	mock.recorder = &MockUnicastReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUnicastReceiver) EXPECT() *MockUnicastReceiverMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockUnicastReceiver) Start(ctx context.Context, ip, port string) <-chan ReceiveResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx, ip, port)
	ret0, _ := ret[0].(<-chan ReceiveResult)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockUnicastReceiverMockRecorder) Start(ctx, ip, port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockUnicastReceiver)(nil).Start), ctx, ip, port)
}
